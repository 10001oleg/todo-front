{"ast":null,"code":"const baseUrl = \"http://localhost:4000/api\";\nexport const api = Object.freeze({\n  signUp: async data => {\n    const response = await fetch(`${baseUrl}/v1/users`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`register failed: ${message}`);\n    }\n  },\n  signIn: async data => {\n    const {\n      email,\n      password\n    } = data;\n    const response = await fetch(`${baseUrl}/v1/auth/login`, {\n      method: \"POST\",\n      headers: {\n        authorization: `Basic ${btoa(`${email}:${password}`)}`\n      }\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: token\n    } = await response.json();\n\n    if (!token) {\n      throw new Error(`server does not return any token`);\n    }\n\n    return token;\n  },\n  readTodos: async token => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: \"GET\",\n      headers: {\n        \"x-token\": token\n      }\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: todos\n    } = await response.json();\n    return todos;\n  },\n  createTodo: async (token, body) => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: \"POST\",\n      headers: {\n        \"x-token\": token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: todo\n    } = await response.json();\n    return todo;\n  },\n  updateTodo: async (todoId, token, body) => {\n    console.log(\"---body\", body);\n    const response = await fetch(`${baseUrl}/v2/todos/${todoId}`, {\n      method: \"PUT\",\n      headers: {\n        \"x-token\": token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({ ...body,\n        status: \"new\"\n      })\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/10001oleg/todo-ui/src/api/index.js"],"names":["baseUrl","api","Object","freeze","signUp","data","response","fetch","method","headers","body","JSON","stringify","ok","message","json","Error","signIn","email","password","authorization","btoa","token","readTodos","todos","createTodo","todo","updateTodo","todoId","console","log","status"],"mappings":"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","sourcesContent":["const baseUrl = \"http://localhost:4000/api\";\n\nexport const api = Object.freeze({\n  signUp: async data => {\n    const response = await fetch(`${baseUrl}/v1/users`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      const { message } = await response.json();\n      throw new Error(`register failed: ${message}`);\n    }\n  },\n  signIn: async data => {\n    const { email, password } = data;\n    const response = await fetch(`${baseUrl}/v1/auth/login`, {\n      method: \"POST\",\n      headers: {\n        authorization: `Basic ${btoa(`${email}:${password}`)}`\n      }\n    });\n\n    if (!response.ok) {\n      const { message } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const { data: token } = await response.json();\n\n    if (!token) {\n      throw new Error(`server does not return any token`);\n    }\n\n    return token;\n  },\n  readTodos: async token => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: \"GET\",\n      headers: {\n        \"x-token\": token\n      }\n    });\n\n    if (!response.ok) {\n      const { message } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const { data: todos } = await response.json();\n\n    return todos;\n  },\n  createTodo: async (token, body) => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: \"POST\",\n      headers: {\n        \"x-token\": token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (!response.ok) {\n      const { message } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const { data: todo } = await response.json();\n\n    return todo;\n  },\n  updateTodo: async (todoId, token, body) => {\n    console.log(\"---body\", body);\n    const response = await fetch(`${baseUrl}/v2/todos/${todoId}`, {\n      method: \"PUT\",\n      headers: {\n        \"x-token\": token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({ ...body, status: \"new\" })\n    });\n\n    if (!response.ok) {\n      const { message } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}