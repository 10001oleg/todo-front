{"ast":null,"code":"const baseUrl = 'http://localhost:4000/api';\nexport const api = Object.freeze({\n  signUp: async data => {\n    const response = await fetch(`${baseUrl}/v1/users`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`register failed: ${message}`);\n    }\n  },\n  signIn: async data => {\n    const {\n      email,\n      password\n    } = data;\n    const response = await fetch(`${baseUrl}/v1/auth/login`, {\n      method: 'POST',\n      headers: {\n        authorization: `Basic ${btoa(`${email}:${password}`)}`\n      }\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: token\n    } = await response.json();\n\n    if (!token) {\n      throw new Error(`server does not return any token`);\n    }\n\n    return token;\n  },\n  readTodos: async token => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: 'GET',\n      headers: {\n        'x-token': token\n      }\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: todos\n    } = await response.json();\n    return todos;\n  },\n  createTodo: async (token, body) => {\n    const response = await fetch(`${baseUrl}/v2/todos`, {\n      method: 'POST',\n      headers: {\n        'x-token': token,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n\n    const {\n      data: todo\n    } = await response.json();\n    return todo;\n  },\n  updateTodo: async (todoId, token, body) => {\n    const response = await fetch(`${baseUrl}/v2/todos/${todoId}`, {\n      method: 'PUT',\n      headers: {\n        'x-token': token,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (!response.ok) {\n      const {\n        message\n      } = await response.json();\n      throw new Error(`login failed: ${message}`);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/10001oleg/todo-ui/src/api/index.js"],"names":["baseUrl","api","Object","freeze","signUp","data","response","fetch","method","headers","body","JSON","stringify","ok","message","json","Error","signIn","email","password","authorization","btoa","token","readTodos","todos","createTodo","todo","updateTodo","todoId"],"mappings":"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","sourcesContent":["const baseUrl = 'http://localhost:4000/api';\n\nexport const api = Object.freeze({\n    signUp: async (data) => {\n        const response = await fetch(`${baseUrl}/v1/users`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n\n        if (!response.ok) {\n            const { message } = await response.json();\n            throw new Error(`register failed: ${message}`);\n        }\n    },\n    signIn: async (data) => {\n        const { email, password } = data;\n        const response = await fetch(`${baseUrl}/v1/auth/login`, {\n            method: 'POST',\n            headers: {\n                authorization: `Basic ${btoa(`${email}:${password}`)}`\n            },\n        });\n\n        if (!response.ok) {\n            const { message } = await response.json();\n            throw new Error(`login failed: ${message}`);\n        }\n\n        const { data: token } = await response.json();\n\n        if (!token) {\n            throw new Error(`server does not return any token`);\n        }\n\n        return token;\n    },\n    readTodos: async (token) => {\n        const response = await fetch(`${baseUrl}/v2/todos`, {\n            method: 'GET',\n            headers: {\n                'x-token': token\n            },\n        });\n\n        if (!response.ok) {\n            const { message } = await response.json();\n            throw new Error(`login failed: ${message}`);\n        }\n\n        const { data: todos } = await response.json();\n\n        return todos;\n    },\n    createTodo: async (token, body) => {\n        const response = await fetch(`${baseUrl}/v2/todos`, {\n            method: 'POST',\n            headers: {\n                'x-token': token,\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const { message } = await response.json();\n            throw new Error(`login failed: ${message}`);\n        }\n\n        const { data: todo } = await response.json();\n\n        return todo;\n    },\n    updateTodo: async (todoId, token, body) => {\n        const response = await fetch(`${baseUrl}/v2/todos/${todoId}`, {\n            method: 'PUT',\n            headers: {\n                'x-token': token,\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const { message } = await response.json();\n            throw new Error(`login failed: ${message}`);\n        }\n    },\n});"]},"metadata":{},"sourceType":"module"}